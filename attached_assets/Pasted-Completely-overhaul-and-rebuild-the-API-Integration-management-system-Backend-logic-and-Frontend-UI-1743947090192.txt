Completely overhaul and rebuild the API Integration management system (Backend logic and Frontend UI in React) for this SaaS application. The current implementation is inadequate. The new system must be:

Highly User-Friendly & Intuitive: Guide users seamlessly through complex setups like GHL.

Accurate & GHL-Aligned: Mirror the necessary steps and terminology for connecting with GoHighLevel (as both an app in their marketplace and potentially using GHL's API from our app). This includes handling their specific concepts like Scopes, Redirect URLs, Client Keys, Webhooks, and External Auth setup where applicable.

Value-Driven: Crucially, the UI must display dynamically generated values (e.g., our app's unique Webhook URL, our app's generated GHL Client ID/Secret) for the user to copy and paste into the external service (like GHL). It must also provide clearly labeled fields for the user to paste credentials obtained from the external service (e.g., their OpenAI API Key, or Client ID/Secret from another OAuth app).

Extensible & Scalable: Design the system (frontend components and backend data structures) to easily add dozens or hundreds of integrations in the future (like Make.com), not just GHL and OpenAI. Support various authentication methods (API Key, OAuth2, Basic Auth, Webhooks).

Richly Documented: Provide dynamic, embedded, step-by-step documentation for each integration, including real, working links to external developer portals and incorporating the generated values (like the specific webhook URL the user needs to use).

Visually Polished: Fix existing UI bugs (like the disappearing active sidebar link) and ensure the integration setup interfaces are clear and professional, drawing inspiration from both the GHL setup flows and the Make.com app browser.

Functional: Lay the groundwork for actually using these integrations via triggers (incoming webhooks) and actions (API calls).

I. Specific Problems to Address (Based on Previous Output & Requirements):

Insufficient Detail: Current forms only ask for API keys and generic optional fields.

Lack of GHL Alignment: Does not match GHL's multi-step app setup/external auth process, scope selection, redirect URL management, or webhook event configuration.

Missing Value Display: Fails to show the user our required values (e.g., the generated Webhook URL they need to paste into GHL).

Poor Documentation: Generic text, placeholder URLs, not embedded contextually.

Limited Scope: Only hardcoded GHL and OpenAI options. No clear extensibility pattern.

No Trigger/Action Clarity: Doesn't explain or configure how the integrations will function once connected (e.g., which GHL webhook events trigger actions in our SaaS).

UI Bug: Active sidebar link styling issue needs fixing.

II. Required Frontend UI Overhaul (React - /settings/integrations route):

Main Integration Page (IntegrationsSettingsPage.jsx):

Tabbed Interface (Optional but Recommended): Consider tabs for "Available Integrations" and "Connected Integrations".

Available Integrations View:

Search Bar: Functional, real-time filtering.

App Browser: Use a grid or list layout inspired by Make.com/GHL app marketplaces. Fetch app data from backend (GET /api/integrations/available-apps). Each app entry should show:

Icon

Name

Brief Description

Badges (e.g., "Core", "AI", "CRM", "Verified")

Clicking an app initiates the connection flow.

Connected Integrations View:

Display a list/cards of currently active connections.

Show Icon, Name, Status ("Connected", "Needs Re-auth", "Error").

Include buttons for "Edit Configuration" and "Disconnect".

Integration Connection Flow (Multi-Step Modal or Dedicated Pages):

Initiation: Clicking an app in the browser triggers the setup.

Dynamic Steps: The flow MUST adapt based on the integration's requirements (fetched from the backend metadata).

GHL Integration Setup (Example - Connecting our SaaS to GHL using their API):

Step 1: Authentication Method: Let user choose (OAuth2 Recommended, potentially API Key if needed for certain GHL actions). Use UI similar to GHL's "External Authentication - Step 1".

Step 2: Configure Connection:

If OAuth2: Display a "Connect with GoHighLevel" button that initiates the backend OAuth flow (GET /api/auth/ghl/initiate). Clearly state the required GHL scopes our app needs (fetch scope list from backend metadata).

If API Key: Provide a clearly labeled input field for the user to paste their GHL API Key (obtained from GHL Settings > API). Include a direct, working link to that GHL page in the instructions. Add input for Location ID (optional).

Step 3: Webhook Setup (Crucial):

Display Generated URL: Show the unique, persistent Webhook URL generated by our backend for this specific user/connection (e.g., https://[YOUR_SAAS_REPLIT_URL]/api/webhooks/incoming/ghl/[USER_SPECIFIC_ID]). Provide a "Copy URL" button.

Instructions: Provide clear, step-by-step instructions (with screenshots/GIFs if possible in docs) on exactly where in the GHL settings (Settings > Webhooks) the user needs to paste this URL. Include a working link to the GHL Webhooks documentation/page.

Event Selection: Display a list of relevant GHL webhook events (fetched from backend metadata, matching GHL's list: ContactCreate, ContactUpdate, AppointmentCreate, InboundMessage, etc.). Allow the user to select which events they want our SaaS to listen to using checkboxes. Store these selections.

Step 4: Test & Save: Include a button to "Test Connection" (backend attempts a simple API call) and "Save Integration".

OpenAI Integration Setup:

Clear input for API Key.

Link to OpenAI API Key page.

Inputs for configuration (Default Model, Temperature).

Save button.

Generic OAuth Client Setup (Connecting to other services like Google Sheets, Slack):

Multi-Step UI inspired by GHL External Auth Step 2/3:

Fields for user to input: Client ID, Client Secret (obtained from the external service's dev console).

Fields for user to input (or fetched from metadata): Authorization URL, Access Token URL, Refresh Token URL, required Scopes.

Display our app's Redirect URI (e.g., https://[YOUR_SAAS_REPLIT_URL]/api/auth/[APP_ID]/callback) for the user to copy into the external service's settings.

"Connect" button to initiate the flow.

Test step.

Generic Webhook Integration Setup:

Display generated Webhook URL + Copy button.

Instructions for pasting into the external service.

UI to select which incoming events should trigger actions (might require defining potential trigger schemas later).

UI Bug Fix: Correct the CSS/styling for the active navigation link in the main sidebar so it remains visible and clearly indicates the active page.

III. Required Backend Enhancements (Node.js/Express):

Enhanced Integration Metadata (GET /api/integrations/available-apps):

Return a rich array of app objects. Each object needs:

id: Unique identifier (e.g., 'ghl', 'openai', 'google-sheets').

name: Display name.

iconUrl: Path to logo.

description: Short summary.

category: e.g., 'CRM', 'AI', 'Productivity'.

authMethod: 'ghl-oauth', 'ghl-apikey', 'oauth2', 'apikey', 'webhook', 'none'.

ghlScopesRequired (if authMethod is GHL-related): Array of GHL scope strings our app needs.

ghlWebhookEventsAvailable: Array of GHL event strings the user can subscribe to (e.g., ['ContactCreate', 'ContactUpdate', ...]).

configFields: Array describing required input fields for API keys or generic OAuth setups (e.g., { name: 'apiKey', label: 'API Key', type: 'password', required: true }, { name: 'clientId', label: 'Client ID', type: 'text', required: true }).

oauthConfig (if authMethod is oauth2): Object containing default/required authUrl, tokenUrl, scopes, etc. (some might be user-provided).

documentationUrl: Link to the external service's primary developer/API docs.

Connection Management Endpoints:

POST /api/integrations/connections: Saves a new connection configuration (securely storing credentials/tokens - encrypt sensitive data at rest). Associates selected webhook events. Returns the status.

GET /api/integrations/connections: Lists active connections for the user.

PUT /api/integrations/connections/:id: Updates configuration (e.g., selected webhooks, API key).

DELETE /api/integrations/connections/:id: Disconnects/deletes the integration.

POST /api/integrations/connections/:id/test: Endpoint to test the connection (makes a simple API call to the external service).

Dynamic Value Generation:

Implement logic to generate unique, secure webhook endpoint paths per user/connection (e.g., /api/webhooks/incoming/ghl/[connection_id_or_secure_token]).

If acting as a GHL Marketplace App, the backend needs to manage our Client ID/Secret pair(s) provided by GHL and potentially display these to the user if needed during their setup within GHL.

OAuth Flow Handling:

/api/auth/[app_id]/initiate: Constructs the correct authorization URL and redirects the user.

/api/auth/[app_id]/callback: Handles the callback from the OAuth provider, exchanges code for tokens, securely stores tokens (associated with the connection ID), and redirects the user back to the frontend. Implement robust error handling. Handle token refresh logic (potentially via a background job or on-demand).

Webhook Ingestion:

/api/webhooks/incoming/[app_id]/[secure_token]: A robust endpoint to receive incoming webhooks.

Verify the source (using shared secrets, signature validation if supported by the provider).

Parse the payload.

(Crucial for Functionality): Based on the app_id and the event type in the payload, trigger corresponding actions within the SaaS (e.g., update database, make a GHL API call, call OpenAI). Initially, this can just log the received event, but the infrastructure must be present.

IV. Documentation Generation:

Dynamic Documentation Component/Page: Create a dedicated component or section (IntegrationDocumentation.jsx) that displays help.

Contextual Display: When configuring an integration (e.g., in the modal), embed relevant parts of the documentation directly.

Content:

Step-by-step Instructions: Clear, numbered steps for the entire setup process for that specific app.

Embedded Values: Dynamically insert generated values like the specific Webhook URL or Redirect URI directly into the text (e.g., "Paste the following URL into the Webhook URL field in GHL: [Generated URL]").

Real Links: Use <a> tags with correct href attributes pointing to specific pages in GHL's settings, OpenAI's API key section, etc.

Screenshots/Visuals (Ideal): While AI might not generate images, structure the text anticipating where screenshots would go.

Trigger/Action Info: Explain which webhook events can be subscribed to and briefly what actions they might trigger in the SaaS (even if the action logic isn't fully built yet).

V. Technology & Validation:

Stack: React, Node.js/Express, react-router-dom, axios, sqlite3 (ensure encryption for sensitive fields like tokens/API keys using crypto module), node-cron, chosen UI Library (MUI/Chakra/Tailwind).

Validation Checklist (AI Must Confirm):

Understands the need to completely replace the current simple integration forms.

Will implement distinct setup flows based on authMethod (GHL, OAuth2 Client, APIKey, Webhook).

Confirms UI will display generated values (Webhook URLs, Redirect URIs) for user copying.

Confirms UI will provide correct input fields for credentials from external services.

Will implement backend logic for secure credential storage (encrypted) and OAuth flow handling.

Will structure the backend/frontend to be data-driven and extensible for many future integrations.

Will generate dynamic, step-by-step documentation with real links and embedded generated values.

Will fix the active sidebar link styling bug.

Will implement the webhook ingestion endpoint structure (/api/webhooks/incoming/...).

Will align the GHL setup UI/flow closely with GHL's concepts (Scopes, Webhook Events, Client Keys/Secrets handling as appropriate).

Expected Output:

Refactored/new React components for the integrations section (IntegrationsSettingsPage, AppBrowser, AppListItem, multi-step IntegrationSetupWizard or similar, IntegrationDocumentation).

Refactored/new Backend API endpoints (/api/integrations/*, /api/auth/*, /api/webhooks/incoming/*) with placeholder or basic logic for data handling, credential storage (with comments on encryption), OAuth initiation/callback, and webhook ingestion.

Updated database schema (if needed) to support connection details, selected webhooks, and encrypted credentials.

Clear structure for adding new integration metadata on the backend.

Fixed CSS for the sidebar active link.